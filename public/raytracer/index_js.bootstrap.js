"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcreate_wasm_app"] = self["webpackChunkcreate_wasm_app"] || []).push([["index_js"],{

/***/ "../pkg/raytracerwasm.js":
/*!*******************************!*\
  !*** ../pkg/raytracerwasm.js ***!
  \*******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Frame: () => (/* binding */ Frame),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   greet: () => (/* binding */ greet),\n/* harmony export */   initSync: () => (/* binding */ initSync)\n/* harmony export */ });\nlet wasm;\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); };\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = (typeof TextEncoder !== 'undefined' ? new TextEncoder('utf-8') : { encode: () => { throw Error('TextEncoder not available') } } );\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction greet() {\n    wasm.greet();\n}\n\nconst FrameFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_frame_free(ptr >>> 0, 1));\n\nclass Frame {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Frame.prototype);\n        obj.__wbg_ptr = ptr;\n        FrameFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FrameFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_frame_free(ptr, 0);\n    }\n    /**\n     * @returns {number}\n     */\n    width() {\n        const ret = wasm.frame_width(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    height() {\n        const ret = wasm.frame_height(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    data() {\n        const ret = wasm.frame_data(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} width\n     * @param {number} height\n     * @param {number} brightness\n     * @param {number} sphere_dx\n     * @param {number} sphere_dy\n     * @param {number} sphere_dz\n     * @returns {Frame}\n     */\n    static create(width, height, brightness, sphere_dx, sphere_dy, sphere_dz) {\n        const ret = wasm.frame_create(width, height, brightness, sphere_dx, sphere_dy, sphere_dz);\n        return Frame.__wrap(ret);\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve Wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_alert_58eb525a2266a2c0 = function(arg0, arg1) {\n        alert(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbg_error_7534b8e9a36f1ab4 = function(arg0, arg1) {\n        let deferred0_0;\n        let deferred0_1;\n        try {\n            deferred0_0 = arg0;\n            deferred0_1 = arg1;\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n        }\n    };\n    imports.wbg.__wbg_new_8a6f238a6ece86ea = function() {\n        const ret = new Error();\n        return ret;\n    };\n    imports.wbg.__wbg_stack_0ed75d68575b0f3c = function(arg0, arg1) {\n        const ret = arg1.stack;\n        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n        getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n    };\n    imports.wbg.__wbindgen_init_externref_table = function() {\n        const table = wasm.__wbindgen_export_3;\n        const offset = table.grow(4);\n        table.set(0, undefined);\n        table.set(offset + 0, undefined);\n        table.set(offset + 1, null);\n        table.set(offset + 2, true);\n        table.set(offset + 3, false);\n        ;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction __wbg_init_memory(imports, memory) {\n\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedDataViewMemory0 = null;\n    cachedUint8ArrayMemory0 = null;\n\n\n    wasm.__wbindgen_start();\n    return wasm;\n}\n\nfunction initSync(module) {\n    if (wasm !== undefined) return wasm;\n\n\n    if (typeof module !== 'undefined') {\n        if (Object.getPrototypeOf(module) === Object.prototype) {\n            ({module} = module)\n        } else {\n            console.warn('using deprecated parameters for `initSync()`; pass a single object instead')\n        }\n    }\n\n    const imports = __wbg_get_imports();\n\n    __wbg_init_memory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(module_or_path) {\n    if (wasm !== undefined) return wasm;\n\n\n    if (typeof module_or_path !== 'undefined') {\n        if (Object.getPrototypeOf(module_or_path) === Object.prototype) {\n            ({module_or_path} = module_or_path)\n        } else {\n            console.warn('using deprecated parameters for the initialization function; pass a single object instead')\n        }\n    }\n\n    if (typeof module_or_path === 'undefined') {\n        module_or_path = new URL(/* asset import */ __webpack_require__(/*! raytracerwasm_bg.wasm */ \"../pkg/raytracerwasm_bg.wasm\"), __webpack_require__.b);\n    }\n    const imports = __wbg_get_imports();\n\n    if (typeof module_or_path === 'string' || (typeof Request === 'function' && module_or_path instanceof Request) || (typeof URL === 'function' && module_or_path instanceof URL)) {\n        module_or_path = fetch(module_or_path);\n    }\n\n    __wbg_init_memory(imports);\n\n    const { instance, module } = await __wbg_load(await module_or_path, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__wbg_init);\n\n\n//# sourceURL=webpack://create-wasm-app/../pkg/raytracerwasm.js?\n}");

/***/ }),

/***/ "../pkg/raytracerwasm_bg.wasm":
/*!************************************!*\
  !*** ../pkg/raytracerwasm_bg.wasm ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{module.exports = __webpack_require__.p + \"60a1e7abaae6e1b0a855.wasm\";\n\n//# sourceURL=webpack://create-wasm-app/../pkg/raytracerwasm_bg.wasm?\n}");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var raytracerwasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! raytracerwasm */ \"../pkg/raytracerwasm.js\");\n// www/index.js\n\n\nconst canvas = document.getElementById(\"raytracerwasm-canvas\");\nconst ctx = canvas.getContext('2d');\nconst form = document.querySelector(\"form\");\nconst widthInput = document.getElementById(\"width\");\nconst heightInput = document.getElementById(\"height\");\nconst brightnessInput = document.getElementById(\"brightness\");\nconst brightnessValueSpan = document.getElementById(\"brightness-value\");\n\nlet memory;\nlet spherePos = { x: 0, y: 0, z: 0 };\nconst moveStep = 0.5;\nconst brightnessStep = 0.1;\n\nfunction updateBrightnessUI(value) {\n    const val = Math.max(0, Math.min(4, parseFloat(value))).toFixed(1);\n    brightnessInput.value = val;\n    brightnessValueSpan.textContent = val;\n}\n\nwindow.onload = async () => {\n    try {\n        const wasm = await (0,raytracerwasm__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        memory = wasm.memory;\n        render();\n    } catch (e) {\n        console.error(\"Error initializing wasm module\", e);\n    }\n};\n\nform.addEventListener(\"submit\", event => {\n    event.preventDefault();\n    render();\n});\n\n// Re-render when form inputs change\nwidthInput.addEventListener(\"input\", () => render());\nheightInput.addEventListener(\"input\", () => render());\nbrightnessInput.addEventListener(\"input\", () => {\n    updateBrightnessUI(brightnessInput.value);\n    render();\n});\n\nwindow.addEventListener(\"keydown\", (event) => {\n    let needsRender = false;\n    switch (event.key.toLowerCase()) {\n        case 'w': // forward\n            spherePos.z -= moveStep;\n            needsRender = true;\n            break;\n        case 's': // backward\n            spherePos.z += moveStep;\n            needsRender = true;\n            break;\n        case 'a': // left\n            spherePos.x -= moveStep;\n            needsRender = true;\n            break;\n        case 'd': // right\n            spherePos.x += moveStep;\n            needsRender = true;\n            break;\n        case 'q': // up\n            spherePos.y += moveStep;\n            needsRender = true;\n            break;\n        case 'e': // down\n            spherePos.y -= moveStep;\n            needsRender = true;\n            break;\n        case 'x': // brightness up\n            updateBrightnessUI(parseFloat(brightnessInput.value) + brightnessStep);\n            needsRender = true;\n            break;\n        case 'z': // brightness down\n            updateBrightnessUI(parseFloat(brightnessInput.value) - brightnessStep);\n            needsRender = true;\n            break;\n    }\n\n    if (needsRender) {\n        render();\n    }\n});\n\nfunction render() {\n    // Add a small delay to debounce rapid input changes\n    clearTimeout(render.timeout);\n    render.timeout = setTimeout(() => {\n        const width = parseInt(widthInput.value);\n        const height = parseInt(heightInput.value);\n        const brightness = parseFloat(brightnessInput.value);\n\n        if (isNaN(width) || isNaN(height) || width <= 0 || height <= 0) {\n            return; // Avoid rendering with invalid dimensions\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n\n        const frame = raytracerwasm__WEBPACK_IMPORTED_MODULE_0__.Frame.create(width, height, brightness, spherePos.x, spherePos.y, spherePos.z);\n        const dataPtr = frame.data();\n        // The image format from Rust is RGB, but ImageData expects RGBA.\n        const pixelCount = width * height;\n        const input = new Uint8Array(memory.buffer, dataPtr, pixelCount * 3);\n        const output = new Uint8ClampedArray(pixelCount * 4);\n\n        for (let i = 0; i < pixelCount; i++) {\n            output[i * 4 + 0] = input[i * 3 + 0]; // R\n            output[i * 4 + 1] = input[i * 3 + 1]; // G\n            output[i * 4 + 2] = input[i * 3 + 2]; // B\n            output[i * 4 + 3] = 255;              // A\n        }\n\n        const imageData = ctx.createImageData(width, height);\n        imageData.data.set(output);\n        ctx.putImageData(imageData, 0, 0);\n    }, 16); // roughly 60fps debounce\n}\n\n//# sourceURL=webpack://create-wasm-app/./index.js?\n}");

/***/ })

}]);